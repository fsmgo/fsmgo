package {{.Package}}

import (
	"context"
	"testing"

	"github.com/fsmgo/fsmgo/pkg/fsm"
)

{{- if .CommonsHere }}

func newTestStateContext() *StateContext {
	return &StateContext{}
}

{{- end }}

func Test{{.CapState}}FromName(t *testing.T) {
	st, ok := FromStateName("{{.CapState}}")
	if !ok || st != {{.CapState}} {
		t.Errorf("FromStateName() failed. Expected: %v, got: %v", {{.CapState}}, st)
	}
}
{{ $st := .CapState }}
{{- $trs := .TransitionsMap }}
{{- range .Events }}

func Test{{$st}}{{.Method}}(t *testing.T) {
	cfg := fsm.Config{
		ID: "test",
	}
	stCtx := newTestStateContext()

	sm, err := fsm.NewStateMachine(&cfg, {{$st}}, stCtx)
	if err != nil {
		t.Errorf("FSM init error: %v", err)
	}

	ctx := context.Background()

	err = sm.ProcessEvent(ctx, NewEvent(Event{{.CapEvent}}))
	if err != nil {
		t.Errorf("FSM error: %v", err)
	}
{{ if index $trs .Event }}
	expected := {{ index $trs .Event }}
{{- else }}
	expected := {{ $st }}
{{- end }}
	if expected.String() != sm.State() {
		t.Errorf("Unexpected state: got %v, expected %v\n", sm.State(), expected.String())
	}
}
{{ end }}